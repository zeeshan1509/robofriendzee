{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","username","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAqBeA,EApBF,SAACC,GAAS,IAEhBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,MAAOC,EAAKH,EAALG,GACnB,OAEE,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,aACrB,6BACC,gCAAMF,GACN,+BAAKC,EAAL,QCgBWK,EAvBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEjB,OAEA,6BAECA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CAAMC,IAAKD,EACXR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBY,SAAUL,EAAOG,GAAGE,SACpBX,MAAOM,EAAOG,GAAGT,aCCNY,EAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAEhC,OACC,yBAAKZ,UAAU,OACd,2BACAA,UAAU,qEACVa,KAAK,SACLC,YAAY,oBACZC,SAAUH,MCDEI,EAPA,SAACpB,GACf,OACA,yBAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnExB,EAAMyB,WC8BMC,E,kDA/Bd,WAAY1B,GAAO,IAAD,8BACjB,cAAMA,IACD2B,MAAQ,CACZC,UAAU,GAHM,E,8DAODC,EAAOC,GAExBC,KAAKC,SAAS,CAACJ,UAAU,M,+BASzB,OAAGG,KAAKJ,MAAMC,SAIN,yDAGDG,KAAK/B,MAAMyB,a,GA3BSQ,aC+DbC,G,wDAxDd,aAAc,IAAD,8BACZ,gBAgBDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEjB,YAAaqB,EAAMC,OAAOC,SAhB1C,EAAKX,MAAM,CACTnB,OAAQ,GACPO,YAAc,KAJL,E,gEAQO,IAAD,OAElBwB,MADW,8CAEVC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAEzBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAExB,OAAQmC,S,+BAQ/B,IAAD,EAGuBZ,KAAKJ,MAA3BnB,EAHD,EAGCA,OAAQO,EAHT,EAGSA,YACT6B,EAAiBpC,EAAOqC,QAAO,SAAAC,GACrC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASjC,EAAYgC,kBAGrD,OAAsB,IAAlBvC,EAAOyC,OACH,0CAKP,yBAAK7C,UAAU,MAChB,wBAAIA,UAAU,MAAd,mBACA,kBAAC,EAAD,CAAWY,aAAgBe,KAAKI,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAAQoC,W,GAzCHX,cCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KAEF,kBAAC,EAAD,OAIAC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.d4285ad7.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = (props)=>{\r\n\r\n\tconst{name, email, id}= props;\r\n\treturn (\r\n\r\n\t\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src= {`https://robohash.org/${id}200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2> {name}</h2>\r\n\t\t\t\t<p> {email} </p>\r\n\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t);\r\n\r\n\r\n\r\n\r\n}\r\nexport default Card;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**import React, {\tComponent} from 'react';\r\n\r\nclass Card extends Component{\r\n\trender(){\r\n\r\n\t\tconst {name, email, id}\t= this.props;\r\n\t\treturn (\r\n\r\n\t\t\t<div class='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots'src= {`https://robohash.org/${this.props.id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2> {this.props.name}</h2>\r\n\t\t\t\t<p> {this.props.email} </p>\r\n\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t)\r\n\r\n\t\t}\r\n \r\n\t}\r\nexport default Card; **/\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({robots}) => {\r\n\t\r\n\treturn(\r\n\r\n\t<div>\r\n\t\t\t\t { \r\n\t\trobots.map((user, i)=>{\r\n\t\t\treturn (\r\n\t\t\t\t<Card key={i}\r\n\t\t\t\tid={robots[i].id}\r\n\t\t\t\tname={robots[i].name}\r\n\t\t\t\tusername={robots[i].username} \r\n\t\t\t\temail={robots[i].email}/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t\t} \r\n\t</div>\r\n\r\n\r\n\t);\r\n\r\n}\r\n\r\nexport default CardList;\r\n\r\n\r\n\r\n\r\n/** \r\n\r\nIt also works if we make the card component .\r\nconst CardList =({robots}) => {\r\n\tconst cardComponent = robots.map((user, i)=>{\r\n\t\treturn (\r\n\t\t<Card key={i}\r\n\t\tid={robots[i].id}\r\n\t\tname={robots[i].name}\r\n\t\tusername={robots[i].username} \r\n\t\temail={robots[i].email}/>\r\n\t\t)\r\n\r\n\r\n\t}) \r\n\treturn(\r\n\r\n\t\t\t<div>\r\n\t\t\t\t{cardComponent}    \r\n\t\t\t    \r\n\t\t\t</div>\r\n\r\n\t);\r\n\r\n}\r\n\r\nexport default CardList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n**/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**import React, {Component} from 'react';\r\nimport Card from './Card';\r\n\r\nclass cardlist extends Component{\r\n\r\n\trender({robots}){\r\n\t\treturn(\r\n\r\n\t\t\t\t<div>\r\n\t\t\t    \t<Card id={robots[0].id} name={robots[0].name} username={robots[0].username} email={robots[0].email}/>\r\n\t\t\t    \t<Card  id={robots[1].id} name={robots[1].name} username={robots[1].username} email={robots[1].email}/>\r\n\t\t\t    \t<Card id={robots[2].id} name={robots[2].name} username={robots[2].username} email={robots[2].email}/>\r\n\t\t\t   </div>\r\n\t\t\t)\r\n\r\n\r\n\r\n\t}\r\n}\r\nexport default cardlist;\r\n**/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\nreturn(\r\n\t<div>\r\n    \t<Card id={robots[0].id} name={robots[0].name} username={robots[0].username} email={robots[0].email}/>\r\n    \t<Card  id={robots[1].id} name={robots[1].name} username={robots[1].username} email={robots[1].email}/>\r\n    \t<Card id={robots[2].id} name={robots[2].name} username={robots[2].username} email={robots[2].email}/>\r\n   </div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default cardlist;\r\n */\r\n\t","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--dark-green bg-lightest-blue hover-bg-light-blue .br-pill'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search my friends'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\t\t\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n\t {props.children}\r\n\t</div> \r\n\t);\r\n}; \r\nexport default Scroll;","import React,{Component} from 'react'\r\n\r\nclass ErrorBoundary extends Component{\r\n\t\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(error, info)\r\n {\r\n\tthis.setState({hasError: true});\r\n};\r\n\r\n\t\r\n\r\n\r\n\r\n\r\nrender(){\r\n\tif(this.state.hasError)/** if hasError true**/\r\n\r\n\t{\r\n\r\n\t\treturn <h1> Ooops. This is not good </h1>\r\n\t}\r\n\r\n\treturn this.props.children;\r\n}\r\n}\r\n\r\n \r\n\r\nexport default ErrorBoundary;\r\n","import React, {Component}from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\t\trobots: [],\r\n \t\t\t\tsearchfield:  ' '\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tconst url= \"https://jsonplaceholder.typicode.com/users\"\r\n\t\tfetch(url)\r\n\t\t.then(response=> response.json())\r\n\r\n\t\t.then(users => this.setState({ robots: users}));\r\n\r\n\t}\r\n\r\n\tonSearchChange = (event)=>{\r\n\t\tthis.setState({ searchfield: event.target.value})\r\n \r\n\t}\r\n\trender(){\r\n\r\n\r\n\t\t\tconst {robots, searchfield}= this.state\r\n\t\t\tconst filteredRobots = robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase()); \r\n\r\n\t\t})\r\n\t\t\tif (robots.length === 0 ){\r\n\t\t\t\treturn <h1> Loading..</h1>\r\n\t\t\t} else {\r\n\t\t\t\treturn(\r\n\r\n\r\n\t\t  <div className='tc'>\r\n\t\t\t<h1 className='f1'> RoboFriendZee </h1>\r\n\t\t\t<SearchBox searchChange = {this.onSearchChange } />\r\n\t\t\t<Scroll>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\t\t  </div>\r\n\t\r\n \t\t\t)\r\n\t\t\t}\r\n\r\n\t}\r\n \t\t\r\n}\r\n\r\n \r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n \t  <React.StrictMode>\n \t  \n \t<App />\n \n  </React.StrictMode>,\n   \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}